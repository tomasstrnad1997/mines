// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: players.sql

package store

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (username, password_hash, created_at)
VALUES (?, ?, NOW())
RETURNING id, username, password_hash, created_at
`

type CreatePlayerParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.Username, arg.PasswordHash)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, username, password_hash, created_at
FROM players
WHERE id = ?
`

func (q *Queries) GetPlayerByID(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayerByUsername = `-- name: GetPlayerByUsername :one
SELECT id, username, password_hash, created_at
FROM players
WHERE username = ?
`

func (q *Queries) GetPlayerByUsername(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByUsername, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}
